var tipuesearch = {"pages": [{'title': 'About', 'text': '設計二甲 王銘楫 \n 倉儲: cad2020 \n 小組網站 \n 小組倉儲 \n -------------------------------------------- \n 第二組 \n Repository: \xa0 40723153 \xa0 | Site: \xa0 40723153 Repository: \xa0 40723225 \xa0 | Site: \xa0 40723225 Repository: \xa0 40823109 \xa0 | Site: \xa0 40823109 Repository: \xa0 40823110 \xa0 | Site: \xa0 40823110 Repository: \xa0 40823111 \xa0 | Site: \xa0 40823111 Repository: \xa0 40823117 \xa0 | Site: \xa0 40823117 Repository: \xa0 40823118 \xa0 | Site: \xa0 40823118 Repository: \xa0 40823123 \xa0 | Site: \xa0 40823123 Repository: \xa0 40823126 \xa0 | Site: \xa0 40823126 Repository: \xa0 40823139 \xa0 | Site: \xa0 40823139 Repository: \xa0 40823144 \xa0 | Site: \xa0 40823144 Repository: \xa0 40823153 \xa0 | Site: \xa0 40823153 Repository: \xa0 40871106 \xa0 | Site: \xa0 40871106 \n \n -------------------------------------------- \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Content', 'text': '', 'tags': '', 'url': 'Content.html'}, {'title': 'W1', 'text': '', 'tags': '', 'url': 'W1.html'}, {'title': 'HW1', 'text': 'task:使用繪圖軟體繪製零件比較其體積 \n \n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': '網頁建立', 'text': 'step1. \n Download\xa0 fall2020_cp.7 \xa0至隨身碟 \n \n step2. \n Download\xa0 Portable GIT. \xa0至fall2020/data 目錄下 \n \n \n step3. \n 建立倉儲 \n \n step4. \n 編譯start.bat的路徑 \n \n \n step5. \n 至倉儲取得URL，並且git clone 下內容 \n \n \n step6. \n 使用git submodule取得cmsimde \n \n \n step7. \n 將cmsimde/up_dir目錄下的檔案拉到外層 \n \n step8. \n 用pip載入所需套件 \n \n \n step8. \n 用wsgi.py 測試網頁編輯 \n \n \n \n final step.\xa0 \n 將資料git push至倉儲即完成 \n \n \n', 'tags': '', 'url': '網頁建立.html'}, {'title': 'W2', 'text': '', 'tags': '', 'url': 'W2.html'}, {'title': 'HW2', 'text': 'task:紀錄零件繪製過程，以供組員學習參照 \n Inventor版本:2020 \n 檔案: 雲端硬碟 \n 第一題 \n \n \n 第二題 \n \n 第三題 \n \n 第四題 \n \n 第五題 \n \n 第六題 \n \n 第七題 \n \n 第八題 \n \n 第九題 \n \n 第十題 \n \n 第十一題 \n \n 第十二題 \n \n \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'W3', 'text': '中秋放假 \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '', 'tags': '', 'url': 'W4.html'}, {'title': 'ssh', 'text': '為什麼要使用SSH? \n 不使用SSH時，在git push至倉儲必須輸入密碼，然而，在公開場所輸入密碼顯然是件高風險的事! \n 因此，藉由在本地跟遠端倉儲存入密鑰，在git push時即可藉由密鑰做身分認證，不必在每次推送時，還需要輸入密碼，大大減少曝光風險。 \n \n 如何使用SSH? \n step1. \n 進入shell環境 \n \n \n step2. \n 使用以下指令創建key \n ssh-keygen -t rsa -b 4096 -C "使用者學號" \n \n 並確定是否成功創建 \n \n \n \n step3. \n 利用Putty中的 puttygen.exe 將id_rsa解讀成private key \n \n \n step4. \n 進入倉儲頁面，點選setting，進入SSH & GPG keys中點選New SSH key,將public key存入遠端倉儲 \n \n \n \n step5. \n 編譯start.bat，加入以下 \n \n \n set GIT_HOME=%Disk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n \n step6. \n 編譯.git下的config，使其變為SSH認證 \n \n [core]\n\xa0\xa0\xa0\xa0repositoryformatversion = 0\n\xa0\xa0\xa0\xa0filemode = false\n\xa0\xa0\xa0\xa0bare = false\n\xa0\xa0\xa0\xa0logallrefupdates = true\n\xa0\xa0\xa0\xa0symlinks = false\n\xa0\xa0\xa0\xa0ignorecase = true\n[submodule]\n\xa0\xa0\xa0\xa0active = .\n[remote "origin"]\n\xa0\xa0\xa0\xa0#url = https://github.com/mdecourse/cad2020.git\n\xa0\xa0\xa0\xa0url = git@github.com:mdecourse/cad2020.git\n\xa0\xa0\xa0\xa0fetch = +refs/heads/*:refs/remotes/origin/*\n[branch "master"]\n\xa0\xa0\xa0\xa0remote = origin\n\xa0\xa0\xa0\xa0merge = refs/heads/master\n[submodule "cmsimde"]\n\xa0\xa0\xa0\xa0url = https://github.com/mdecourse/cmsimde.git \n \n final step \n 進入 putty.exe，將本地的private key做login \n \n \n *完成後請測試推送，成功使用SSH推送後，倉儲的SSH頁面的鑰匙會變成綠色的，並在下方顯示推送日期 \n \n \n \n', 'tags': '', 'url': 'ssh.html'}, {'title': 'W5', 'text': '什麼 API? \n API(Application Programming Interface\xa0)直譯為應用程式介面，但以中文來看，似乎不太好理解。 \n 以下舉例說明 \n 當你口渴時想喝飲料，找了個自動販賣機投了25元，點了12號按鈕，從出口拿了罐紅茶。  但是，自動販賣機不像人類一樣，可以直接跟他說:我要12號的紅茶。 \n 那怎麼讓機器明白我要做什麼? \n 此時按鈕就成了與機器溝通的橋梁，而按鈕的概念就如同API!  使機器與機器、程式與程式間明白我需要做的事，這就是API的概念。 \n 盜版、正版與軟體版本 ? \n 在工程界裡常見的一大弊病就是使用盜版軟體，而這造成了什麼影響? \n 盜版軟體所存取的檔案在正版軟體中可能無法解析，試想做了一個月的project到了客戶的手中，  當客戶打開檔案時，竟然檔案無法做解析，此時花費一個月的成果等於白費!  然而在modify時發現全公司上下竟然使用的都是盜版軟體，於是無法快速的輸出可行的版本。  又抑或是公司購入的版本過舊，使客戶端依然無法解析檔案等等。  以上皆是工程界中不願意使用正版軟體與使用新版本所產生的重大問題。 \n \xa0', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': '利用API繪製零件', 'text': '', 'tags': '', 'url': '利用API繪製零件.html'}, {'title': 'W7', 'text': '', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'W11', 'text': '', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': '', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': '', 'tags': '', 'url': 'W15.html'}, {'title': 'Project', 'text': '', 'tags': '', 'url': 'Project.html'}]};